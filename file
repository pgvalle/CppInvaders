@startuml





/' Objects '/

class CppInvaders::Game {
	+Game()
	+~Game()
	-horde : Horde*
	-shields : Shield[]
	-horde_shot : Shot*
	- : Shot**
	-spaceship : Spaceship*
	-state : State
	-ufo : UFO*
	-horde_reached_spaceship : bool
	-timer : float
	+draw() : void
	-process_collisions() : void
	+process_event(const SDL_Event& event) : void
	+update(float delta) : void
}


class CppInvaders::Over {
	+Over()
	+~Over()
	-state : State
	-timer : float
	-i : int
	+draw() : void
	+process_event(const SDL_Event& event) : void
	+update(float delta) : void
}


class CppInvaders::Pause {
	+Pause()
	+~Pause()
	-state : State
	-pause_symbol : bool
	-timer : float
	+draw() : void
	+process_event(const SDL_Event& event) : void
	+update(float delta) : void
}


class CppInvaders::Splash {
	+Splash()
	+~Splash()
	-state : State
	-typewrite_next_char() : bool
	-timer : float
	-c : int
	-l : int
	+draw() : void
	+process_event(const SDL_Event& event) : void
	+update(float delta) : void
}


enum CppInvaders::Game::State {
	PLAYING
	RESTARTING
	RESTARTING2
	STARTING
}


enum CppInvaders::Over::State {
	TYPEWRITING
	WAITING
}


enum CppInvaders::Pause::State {
	PAUSED
	RESUMING
}


enum CppInvaders::Screen {
	GAME
	OVER
	PAUSE
	SPLASH
}


enum CppInvaders::Splash::State {
	TYPEWRITING1
	TYPEWRITING2
	WAITING1
	WAITING2
	WAITING_KEYPRESS
}


enum Horde::State {
	DEPLOYING
	FROZEN
	MARCHING
}


enum Invader::State {
	DEAD
	DOWN
	UP
}


enum Shot::State {
	ALIVE
	DEAD
	EXPLODING
}


enum Spaceship::State {
	DEPLOYED
	DEPLOYING
	EXPLODING
}


enum UFO::State {
	ALIVE
	AWAY
	DEAD
	EXPLODING
}


class CppInvaders {
	+CppInvaders()
	+~CppInvaders()
	-game : Game*
	-over : Over*
	-pause : Pause*
	-screen : Screen
	-splash : Splash*
	+should_quit : bool
	-credits : int
	-hi_score : int
	-score : int
	+add_to_score(int value) : void
	-draw_credit_counter() : void
	-draw_scoreboard() : void
	-load_scoreboard() : void
	+process_event(const SDL_Event& event) : void
	-save_scoreboard() : void
	+update_and_draw(float delta) : void
}


class Horde {
	+invaders : Invader[]
	+shoot(float spaceship_x) : Shot*
	+state : State
	+timer : float
	+dx : int
	+dy : int
	+i : int
	+i : int
	+get_alive_invaders() : std::vector<Invader*>
	+draw() : void
	+explode_invader(int index) : void
	+update(float delta) : void
}


class Invader {
	+get_rect() : SDL_Rect
	+state : State
	+type : int
	+x : int
	+y : int
	+deploy(int i) : void
	+draw() : void
	+move(int dx, int dy) : void
}


class Shield {
	+damage(Shot* shot) : bool
	+bits : bool[]
	+x : int
	+damage(SDL_Rect rect) : void
	+deploy(int x) : void
	+draw() : void
}


class Shot {
	+state : State
	+show_explosion_img : bool
	+explosion_timer : float
	+vy : float
	+x : float
	+y : float
	+draw() : void
	+explode(float time) : void
	+explode_without_img(float time) : void
	+update(float delta) : void
}


class Spaceship {
	+shoot() : Shot*
	+state : State
	+ : float
	+timer : float
	+x : float
	+lives : int
	+lives : int
	+draw() : void
	+explode() : void
	+update(float delta) : void
}


class UFO {
	+state : State
	+ : float
	+timer : float
	+vx : float
	+x : float
	+score : int
	+draw() : void
	+explode() : void
	+update(float delta) : void
}





/' Inheritance relationships '/




/' Aggregation relationships '/

CppInvaders::Game o-- Horde


CppInvaders::Game *-- Shield


CppInvaders::Game "2" o-- Shot


CppInvaders::Game o-- Spaceship


CppInvaders::Game o-- UFO


Horde *-- Invader






/' Nested objects '/

CppInvaders +-- CppInvaders::Screen


Horde +-- Horde::State


Invader +-- Invader::State


Shot +-- Shot::State


Spaceship +-- Spaceship::State


UFO +-- UFO::State




@enduml
